import {useState, useEffect} from 'react'
import {sendMessage, getTicketPrompt, PromptResponse} from '@/actions/model/chat'
import {createJiraTicket} from '@/actions/model/ticket'
import {Platform} from '@/actions/model/types'

interface Message {
    role: "system" | "user" | "assistant"
    content: string
}

export function useModel(ticketId: string, platform: Platform = Platform.Jira) {
    const [isLoading, setIsLoading] = useState(false)
    const [error, setError] = useState<string | null>(null)
    const [conversationHistory, setConversationHistory] = useState<Message[]>([])
    const [isLoadingData, setIsLoadingData] = useState(true)
    const [isComplete, setIsComplete] = useState(false)
    const [promptData, setPromptData] = useState<PromptResponse | null>(null)

    useEffect(() => {
        const fetchData = async () => {
            try {
                setIsLoadingData(true);

                const fetchedPromptData = await getTicketPrompt(platform, ticketId);

                if (!fetchedPromptData) {
                    throw new Error("Les donn√©es du prompt n'ont pas pu √™tre r√©cup√©r√©es.");
                }

                setPromptData(fetchedPromptData);

                const welcomeMessage = {
                    role: 'assistant' as const,
                    content: `Bonjour et merci de prendre le temps de nous signaler ce probl√®me. üöÄ

Notre objectif est de r√©soudre votre bug le plus rapidement possible, et pour cela, nous avons besoin de quelques pr√©cisions. Pas d'inqui√©tude, notre assistant est l√† pour vous guider afin de transmettre les bonnes informations d√®s le d√©part.

En quelques questions, nous allons identifier le souci et s'assurer que l'√©quipe technique puisse agir efficacement, sans allers-retours inutiles.

üîç D√©crivez simplement le probl√®me, et nous nous occupons du reste !`
                };

                setConversationHistory([welcomeMessage]);

            } catch {
                setError("Erreur lors du chargement des donn√©es du ticket");
            } finally {
                setIsLoadingData(false);
            }
        };

        fetchData();
    }, [ticketId, platform]);

    const sendTicketQuestion = async (userInput: string) => {
        if (!promptData) {
            setError("Donn√©es du prompt non disponibles")
            return
        }

        try {
            setIsLoading(true)
            setError(null)

            setConversationHistory(prev => [
                ...prev,
                {
                    role: 'user',
                    content: userInput
                }
            ]);

            const response = await sendMessage(userInput, conversationHistory, promptData)

            if (!response) {
                throw new Error("Pas de r√©ponse du mod√®le");
            }

            if (response.title && response.description && response.priority) {
                try {
                    await createJiraTicket(platform, ticketId, {
                        title: response.title,
                        description: response.description,
                        priority: response.priority
                    });

                    setIsComplete(true);

                    setConversationHistory(prev => [
                        ...prev,
                        {
                            role: 'assistant',
                            content: "Merci beaucoup pour votre retour ainsi que de votre temps ! üéâ\n\nVos informations ont bien √©t√© enregistr√©es et envoy√©es √† l'administrateur.\nVous pouvez fermer cette page."
                        }
                    ]);
                } catch {
                    setConversationHistory(prev => [
                        ...prev,
                        {
                            role: 'assistant',
                            content: "Une erreur est survenue lors de la cr√©ation du ticket. Veuillez r√©essayer."
                        }
                    ]);
                }
            } else if (response.message) {
                setConversationHistory(prev => [
                    ...prev,
                    {
                        role: 'assistant',
                        content: response.message || "D√©sol√©, je n'ai pas compris votre demande."
                    }
                ]);
            } else {
                throw new Error("Format de r√©ponse invalide");
            }
        } catch {
            setError('Erreur lors de la communication avec Mistral');
            setConversationHistory(prev => [
                ...prev,
                {
                    role: 'assistant',
                    content: "D√©sol√©, une erreur est survenue lors de la communication avec l'assistant. Veuillez r√©essayer."
                }
            ]);
        } finally {
            setIsLoading(false)
        }
    }

    return {
        sendTicketQuestion,
        isLoading,
        isLoadingData,
        error,
        conversationHistory,
        isComplete
    }
}